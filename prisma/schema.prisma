// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CONSUMER // 참새
  SELLER  // 어미새
  ADMIN
  USER
}

enum UserLevel {
  BEGINNER_SPARROW
  GOOD_SPARROW
  BEST_SPARROW
  LEADER_SPARROW
  VIP_SPARROW
  BEGINNER_MOTHER_BIRD
  GOOD_MOTHER_BIRD
  BEST_MOTHER_BIRD
  LEADER_MOTHER_BIRD
  VIP_MOTHER_BIRD
}

enum PurchaseStatus {
  DRAFT       // 임시저장
  RECRUITING  // 참여자 모집 중
  BIDDING     // 입찰 진행 중
  VOTING      // 투표 진행 중
  CONFIRMED   // 낙찰 완료
  IN_PROGRESS // 거래 진행 중
  COMPLETED   // 완료
  CANCELLED   // 취소됨
}

enum BidStatus {
  PENDING   // 입찰 중
  ACCEPTED  // 낙찰됨
  REJECTED  // 거절됨
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  level         UserLevel @default(BEGINNER_SPARROW)
  nickname      String?
  phone         String?
  businessNumber String?  @unique
  businessLicense String?
  participationCount Int @default(0)
  penaltyCount Int @default(0)
  penaltyEndTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  points        Int     @default(0)  // 입찰 포인트
  bidCount      Int     @default(0)  // 입찰 횟수
  rating        Float?  // 평점
  accounts      Account[]
  sessions      Session[]
  groupPurchases GroupPurchase[] @relation("Creator")
  participants  Participant[]
  notifications Notification[]
  votes         Vote[]
  reviews       Review[]
  inquiries     Inquiry[]
  bids          Bid[]           // 입찰 내역
  messages      Message[]       // 채팅 메시지

  @@index([email])
  @@index([phone])
}

model GroupPurchase {
  id          String   @id @default(cuid())
  title       String   // 공구 제목
  description String   // 상세 설명
  imageUrl    String?  // 이미지
  targetPrice Float    // 목표 가격
  // 모집 관련
  minParticipants Int  // 최소 참여자 수
  maxParticipants Int  // 최대 참여자 수
  currentParticipants Int @default(0)  // 현재 참여자 수
  
  // 상태 관련
  status      PurchaseStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 경매 관련
  auctionStartTime DateTime?  // 입찰 시작 시간
  auctionEndTime   DateTime?  // 입찰 마감 시간
  
  // 투표 관련
  voteStartTime    DateTime?  // 투표 시작 시간
  voteEndTime      DateTime?  // 투표 마감 시간
  voteThreshold    Float     @default(0.5)  // 투표 통과 기준 (기본 50%)
  
  // 생성자 관련
  creatorId   String
  creator     User     @relation("Creator", fields: [creatorId], references: [id])

  // 관계
  participants Participant[]  // 참여자 목록
  bids        Bid[]          // 입찰 목록
  votes       Vote[]         // 투표 목록
  messages    Message[]      // 채팅 메시지
  reviews     Review[]       // 리뷰 목록

  @@index([creatorId])
  @@index([status])
}

model Participant {
  id              String   @id @default(cuid())
  userId          String
  groupPurchaseId String
  joinedAt        DateTime @default(now())
  
  user          User          @relation(fields: [userId], references: [id])
  groupPurchase GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@unique([userId, groupPurchaseId])
  @@index([userId])
  @@index([groupPurchaseId])
}

model Bid {
  id              String    @id @default(cuid())
  price           Int       // 입찰 가격
  description     String    // 입찰 설명
  status          BidStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  
  sellerId        String    // 판매자 ID
  groupPurchaseId String    // 공구 ID
  
  seller        User          @relation(fields: [sellerId], references: [id])
  groupPurchase GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@index([sellerId])
  @@index([groupPurchaseId])
}

model Vote {
  id              String        @id @default(cuid())
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  vote            Boolean
  createdAt       DateTime      @default(now())

  @@unique([userId, groupPurchaseId])
  @@index([groupPurchaseId])
  @@index([userId])
}

model Review {
  id              String        @id @default(cuid())
  content         String
  rating          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@index([userId])
  @@index([groupPurchaseId])
}

model Inquiry {
  id              String        @id @default(cuid())
  title           String
  content         String
  answer          String?
  isAnswered      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  userId          String
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id              String        @id @default(cuid())
  userId          String
  type            String
  message         String
  isRead          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Message {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@index([userId])
  @@index([groupPurchaseId])
  @@index([createdAt])
}
